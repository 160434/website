#!/usr/bin/env ruby

require 'timeout'
require 'rubygems'
require 'mechanize'
require 'mongo'
require 'json'
require 'open-uri'

# record sha1 after 30 minutes
# check dns of final url
# set final url

agent = Mechanize.new
agent.open_timeout = 10
agent.read_timeout = 5

github = Mechanize.new
github.auth 'visnup/token', 'XXXXXXXXXXXX'

stop = Time.parse '2010-08-30T00:00Z'

db = Mongo::Connection.new.db "nodeknockout"
@db_teams = db.collection 'Team'
@db_people = db.collection 'Person'

@status = { :ok => 0, :not_ok => 0 }

def error t, e
  t['validDeploy'] = false
  puts "\033[31m  #{e.class}: #{e.message}\033[0m"
  @status[:not_ok] += 1
end

def success t
  t['validDeploy'] = true
  puts "\033[32m  ok\033[0m"
  @status[:ok] += 1
end

query = ARGV.length > 0 ? { :slug => ARGV.shift } : { :validDeploy => false, :url => /\w/ }

@db_teams.find(query).each do |t|
  puts t['slug']

  if t['url'].nil? || t['url'] =~ /^\s*$/
    puts "\033[31m  never deployed\033[0m\n\n"
    error t, Exception.new("never deployed")
    next
  end

  puts "  #{t['url']}"
  begin
    page = agent.get t['url']
    puts "\033[32m  request ok\033[0m"

    if page.body.length < 20
      puts "    #{page.body}"
      error t, Exception.new("body too small")
      next
    end

    # git
=begin
    target = t['lastDeployedTo']
    repo =
      case target
      when 'joyent'
        "ssh://node@#{t['joyentSlug']}.no.de/repo"
      when 'heroku'
        "git@heroku.com/#{t['herokuSlug']}.git"
      end
    puts "  #{target}: #{repo}"
    rev = `git ls-remote #{repo} HEAD 2>/dev/null | awk '{print $1}'`
    github_url = "http://visnup:donut132@github.com/api/v2/json/commits/show/nko/#{t['slug']}/#{rev}"
    puts "  #{rev}" # (#{github_url})"
    commit = JSON.parse(github.get(github_url).body)['commit']
    commit_date = Time.parse commit['authored_date']
    if commit_date > stop
      error t, "rev deployed is late: #{commit_date} > #{stop}"
    else
      puts "\033[32m  rev deployed is ok: #{commit_date}\033[0m"
    end
=end
    success t
  rescue Timeout::Error => e
    error t, e
  rescue Interrupt => e
    raise e
  rescue Exception => e
    error t, e
  end

  puts
end

puts "\033[32m  #{@status[:ok]} ok\033[0m"
puts "\033[31m  #{@status[:not_ok]} not ok\033[0m"
